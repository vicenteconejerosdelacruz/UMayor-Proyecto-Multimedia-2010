struct vsOUT
{
	float4 pos:POSITION;
	#if defined(_HAS_DIFFUSE)
	float4 color:COLOR;
	#endif
	#if defined(_HAS_NORMAL)
	float3 normal:NORMAL;
	#endif
	#if defined(_HAS_UV0)
	float2 uv0:TEXCOORD0;
	#endif
	float3 view:TEXCOORD2;
};

#if defined(_VERTEX_SHADER)

float4x4	MatWorldViewProj;
float4x4	MatWorld;
float4		VecEye;

struct vsIN
{
	float3 pos:POSITION;
	#if defined(_HAS_DIFFUSE)
	float4 color:COLOR;
	#endif	
	#if defined(_HAS_NORMAL)
	float3 normal:NORMAL;
	#endif
	#if defined(_HAS_UV0)
	float2 uv0:TEXCOORD0;
	#endif
};

void main_vs(in vsIN input,out vsOUT output)
{
	output.pos = mul(float4(input.pos,1),MatWorldViewProj);
	float3 posWorld = mul(input.pos,MatWorld);
	
	#if defined(_HAS_DIFFUSE)
	output.color = input.color;
	#endif	
	#if defined(_HAS_NORMAL)
	output.normal = normalize(mul(input.normal,MatWorld));
	#endif
	#if defined(_HAS_UV0)
	output.uv0 = input.uv0;
	#endif
	
	output.view = normalize(VecEye.xyz-posWorld);
}

#elif defined(_PIXEL_SHADER)

//light properties
float4 LightDirection;
float4 LightAmbientColor;
float4 LightDiffuseColor;
float4 LightSpecularColor;

//material
float4	diffuseLightColor;
float4	specularPower; 			//all terms are the same!
float4	specularScaleFactor;	//all terms are the same!

sampler tex0:register(s0);
sampler tex1:register(s1);
sampler tex2:register(s2);
sampler tex3:register(s3);
sampler tex4:register(s4);
sampler tex5:register(s5);
sampler tex6:register(s6);

struct psOUT
{
	float4 color:COLOR0;
};

void main_ps(in vsOUT input,out psOUT output)
{
	output.color = float4(0,0,0,0);
	
	float4 vertexColor = float4(1,1,1,1);
	
	sampler textures[1] = {tex0};
	
	#if defined(_HAS_DIFFUSE)
		vertexColor = input.color;
	#endif

	float3 diffuseIntensity = float3(1,1,1);
	float3 Specular = float3(1,1,1);
	float3 nLightDirection = normalize(LightDirection);
	
	#if defined(_HAS_NORMAL)
		diffuseIntensity = saturate(dot(input.normal,nLightDirection))*LightDiffuseColor.xyz;
		float3 Reflect = normalize(2*diffuseIntensity*input.normal-nLightDirection);
		Specular = specularScaleFactor.x*pow(saturate(dot(Reflect,input.view.xyz)),specularPower.x)*LightSpecularColor.xyz;
	#endif		
	
	float3 matColor = float3(0,0,0);
	
	#if defined(_HAS_UV0)
		matColor+=(tex2D(textures[0],input.uv0.xy).xyz*diffuseIntensity);
	#endif
	
	output.color.xyz = LightAmbientColor.xyz + matColor + Specular;
	
	output.color.a = 1;
}

#endif